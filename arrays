//With JavaScript array variables, we can store several pieces of data in one place.
//You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:

var sandwich = ["peanut butter", "jelly", "bread"]
//You can also nest arrays within other arrays, like below:

[["Bulls", 23], ["White Sox", 45]]
//This is also called a multi-dimensional array.


//We can access the data inside arrays using indexes.
//Array indexes are written in the same bracket notation that strings use, 
//except that instead of specifying a character, they are specifying an entry in the array. 
//Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.
//Example

var array = [50,60,70];
array[0];
var data = array[1];
//array[0] is now 50, and data has the value 60.
//Note: There shouldn't be any spaces between the array name and the square brackets, like array [0]. 
//Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

var myArray = [50,60,70];
myArray[0]; //sets the variable myArray to be 50
var myData = myArray[0] //sets the variable myData to be the same value as myArray
//sets the new variable myData to equal the first value in myArray variable

//Unlike strings, the entries of arrays are mutable and can be changed freely.

//One way to think of a multi-dimensional array, is as an array of arrays.
//When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, 
//and each additional pair of brackets refers to the next level of entries inside.
//Example

var arr = [
  [1,2,3], //arr[0]
  [4,5,6], //arr[1]
  [7,8,9], //arr[2]
  [[10,11,12], 13, 14] //arr[3] which has [0] nested inside. so you could reference arr[3][0] to get to the first array
];
arr[3];
arr[3][0];
arr[3][0][1];
//arr[3] is [[10, 11, 12], 13, 14], arr[3][0] is [10, 11, 12], and arr[3][0][1] is 11.

//An easy way to append data to the end of an array is via the push() function.
//.push() takes one or more parameters and "pushes" them onto the end of the array.
//Examples:

var arr1 = [1,2,3];
arr1.push(4);

var arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);
//arr1 now has the value [1, 2, 3, 4] and arr2 has the value ["Stimpson", "J", "cat", ["happy", "joy"]].

//Another way to change the data in an array is with the .pop() function.
//.pop() is used to pop a value off of the end of an array. 
//We can store this popped off value by assigning it to a variable. 
//In other words, .pop() removes the last element from an array and returns that element.
//Any type of entry can be popped off of an array - numbers, strings, even nested arrays.

var threeArr = [1, 4, 6];
var oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
//The first console.log will display the value 6, and the second will display the value [1, 4].

//pop() always removes the last element of an array. What if you want to remove the first?
//That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.
//Example:

var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
removedFromOurArray would have a value of the string Stimpson, and ourArray would have ["J", ["cat"]].


//Not only can you shift elements off of the beginning of an array, you can also unshift elements to the beginning of an array i.e. add elements in front of the array.
//.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
//Example:

var ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");
//After the shift, ourArray would have the value ["J", "cat"]. 
//After the unshift, ourArray would have the value ["Happy", "J", "cat"].


function nextInLine(arr, item) { //creates a new function called nextInLine that takes an array and item as arguments
  arr.push(item); //argument for taking the first variable value and moving it to the end of the array
  var removed = arr.shift(); //defines new variable called removed that takes the last variable value in the array and moves it to the beginning of the array
  return removed; //when function is called, reference the variable removed
}
var testArr = [1,2,3,4,5]; // global variable for testArr
console.log("Before: " + JSON.stringify(testArr)); //displays "Before" and shows values in testArr variable
console.log(nextInLine(testArr, 6)); //calls the function nextInLine, which uses variable testArr and the number 6 for item
console.log("After: " + JSON.stringify(testArr)); //displays "After" and shows values in testArr variable
