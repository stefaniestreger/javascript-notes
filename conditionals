//You can easily increment or add one to a variable with the ++ operator.
i++;
//is the equivalent of
i = i + 1;
//Note: The entire line becomes i++;, eliminating the need for the equal sign.

var myVar = 87;
myVar = ++myVar; //this will increment myVar by +1

//The remainder operator % gives the remainder of the division of two numbers.
//Example

5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)

//Usage: In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.

17 % 2 = 1 (17 is Odd)
48 % 2 = 0 (48 is Even)
//Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.

//Compound Assignment With Augmented Addition
//In programming, it is common to use assignments to modify the contents of a variable. 
//Remember that everything to the right of the equals sign is evaluated first, so we can say:
myVar = myVar + 5;
//to add 5 to myVar. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.

//One such operator is the += operator.
var myVar = 1;
myVar += 5;
console.log(myVar);
//6 would be displayed in the console.

//compound assignments are usually [declared variable] += [another thing]
//[thing] += [variable] doesn't work and produces a syntax error

//Escaping Literal Quotes in Strings
//When you are defining a string you must start and end with a single or double quote. 
//What happens when you need a literal quote: " or ' inside of your string?
//In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

var sampleStr = "Alan said, \"Peter is learning JavaScript\".";
//This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. 
//So if you were to print this to the console, you would get:

Alan said, "Peter is learning JavaScript".

var myStr = "I am a \"double quoted\" string inside \"double quotes\".";
//prints I am a "double quoted" string inside "double quotes".

//Quoting Strings with Single Quotes
//String values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. 
//Unlike some other programming languages, single and double quotes work the same in JavaScript.

doubleQuoteStr = "This is a string"; 
singleQuoteStr = 'This is also a string';
//The reason why you might want to use one type of quote over the other is if you want to use both in a string. 
//This might happen if you want to save a conversation in a string and have the conversation in quotes. 
//Another use for it would be saving an <a> tag with various attributes in quotes, all within a string.

conversation = 'Finn exclaims to Jake, "Algebraic!"';
//However, this becomes a problem if you need to use the outermost quotes within it. 
//Remember, a string has the same kind of quote at the beginning and end. 
//But if you have that same quote somewhere in the middle, the string will stop early and throw an error.

goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"'; 
badStr = 'Finn responds, "Let's go!"';
//Here badStr will throw an error.
//In the goodStr above, you can use both quotes safely by using the backslash \ as an escape character.


//If statements are used to make decisions in code. 
//The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses.
//These conditions are known as Boolean conditions and they may only be true or false.

//When the condition evaluates to true, the program executes the statement inside the curly braces. 
//When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.

//Pseudocode

if (condition is true) {
  statement is executed
}
//Example

function test (myCondition) {
  if (myCondition) {
     return "It was true";
  }
  return "It was false";
}
test(true);
test(false);
//test(true) returns the string It was true, and test(false) returns the string It was false.

//When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not. 
//Since it is true, the function returns It was true. 
//When we call test with a value of false, myCondition is not true and the statement in the curly braces is not executed and the function returns It was false.


//When a condition for an if statement is true, the block of code following it is executed. 
//What about when that condition is false? Normally nothing would happen. 
//With an else statement, an alternate block of code can be executed.

if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}


//If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.

if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}

//Order is important in if, else if statements.
//The function is executed from top to bottom so you will want to be careful of what statement comes first.

//if/else statements can be chained together for complex logic. 
//Here is pseudocode of multiple chained if / else if statements:

if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
  
//If you have many options to choose from, use a switch statement. 
//A switch statement tests a value and can have many case statements which define various possible values. 
//Statements are executed from the first matched case value until a break is encountered.
//Here is an example of a switch statement:

switch(lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
//case values are tested with strict equality (===). 
//The break tells JavaScript to stop executing statements. 
//If the break is omitted, the next statement will be executed.
function caseInSwitch(val) { //defines the function and describes input
  var answer = ""; //defines a variable called answer for later output
switch(val) { //defines what happens when val in function is set to something
  case 1: //test case 1 = val = 1
    answer = "alpha"; //output alpha in console when val = 1
    break; //stop here if val = 1; otherwise, go to case 2
  case 2:
    answer = "beta";
    break;
  case 3:
    answer = "gamma";
    break;
  case 4:
    answer = "delta";
    break;
}
  return answer; //return answer in output (end of function definition, as well)
}

caseInSwitch(1);
