//There are many comparison operators in JavaScript. 
//All of these operators return a boolean true or false value.
//The most basic operator is the equality operator ==. 
//The equality operator compares two values and returns true if they're equivalent or false if they are not. 
//Note that equality is different from assignment (=), which assigns the value on the right of the operator to a variable on the left.

function equalityTest(myVal) {
  if (myVal == 10) {
     return "Equal";
  }
  return "Not Equal";
}
//If myVal is equal to 10, the equality operator returns true, so the code in the curly braces will execute, and the function will return Equal. 
//Otherwise, the function will return Not Equal. 
//In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. 
//This is known as Type Coercion. Once it does, however, it can compare terms as follows:

1   ==  1
1   ==  2
1   == '1'
"3" ==  3
//In order, these expressions would evaluate to true, false, true, and true.

//Strict equality (===) is the counterpart to the equality operator (==). 
//However, unlike the equality operator, which attempts to convert both values being compared to a common type, 
//the strict equality operator does not perform a type conversion.
//If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.
//Examples

3 ===  3
3 === '3'
//These conditions would return true and false respectively.
//In the second example, 3 is a Number type and '3' is a String type.

//The inequality operator (!=) is the opposite of the equality operator. 
//It means not equal and returns false where equality would return true and vice versa. 
//Like the equality operator, the inequality operator will convert data types of values while comparing.
//Examples

1 !=  2
1 != "1"
1 != '1'
1 != true
0 != false
//In order, these expressions would evaluate to true, false, false, false, and false.

//The strict inequality operator (!==) is the logical opposite of the strict equality operator. 
//It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa.
//The strict inequality operator will not convert data types.
//Examples

3 !==  3
3 !== '3'
4 !==  3
//In order, these expressions would evaluate to false, true, and true.

//The greater than operator (>) compares the values of two numbers. 
//If the number to the left is greater than the number to the right, it returns true.
//Otherwise, it returns false.
//Like the equality operator, the greater than operator will convert data types of values while comparing.
//Examples

5   >  3
7   > '3'
2   >  3
'1' >  9
//In order, these expressions would evaluate to true, true, false, and false.

//The greater than or equal to operator (>=) compares the values of two numbers. 
//If the number to the left is greater than or equal to the number to the right, it returns true. 
//Otherwise, it returns false.
//Like the equality operator, the greater than or equal to operator will convert data types while comparing.
//Examples

6   >=  6
7   >= '3'
2   >=  3
'7' >=  9
//In order, these expressions would evaluate to true, true, false, and false.

//The less than or equal to operator (<=) compares the values of two numbers. 
//If the number to the left is less than or equal to the number to the right, it returns true. 
//If the number on the left is greater than the number on the right, it returns false. 
//Like the equality operator, the less than or equal to operator converts data types.
//Examples

4   <= 5
'7' <= 7
5   <= 5
3   <= 2
'8' <= 4
//In order, these expressions would evaluate to true, true, true, false, and false.



//Sometimes you will need to test more than one thing at a time. 
//The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
//The same effect could be achieved by nesting an if statement inside another if:

if (num > 5) {
  if (num < 10) {
    return "Yes";
  }
}
return "No";
//will only return Yes if num is greater than 5 and less than 10. The same logic can be written as:

if (num > 5 && num < 10) {
  return "Yes";
}
return "No";


//The logical or operator (||) returns true if either of the operands is true.
//Otherwise, it returns false.
//The logical or operator is composed of two pipe symbols: (||). 
//This can typically be found between your Backspace and Enter keys.

//The pattern below should look familiar from prior waypoints:

if (num > 10) {
  return "No";
}
if (num < 5) {
  return "No";
}
return "Yes";
//will return Yes only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:

if (num > 10 || num < 5) {
  return "No";
}
return "Yes";
