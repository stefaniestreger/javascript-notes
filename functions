//In JavaScript, we can divide up our code into reusable parts called functions.
//Here's an example of a function:

function functionName() {
  console.log("Hello World");
}
//You can call or invoke this function by using its name followed by parentheses, like this: functionName(); 
//Each time the function is called it will print out the message Hello World on the dev console. 
//All of the code between the curly braces will be executed every time the function is called.



//Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. 
//When a function is defined, it is typically defined along with one or more parameters.
//The actual values that are input (or "passed") into a function when it is called are known as arguments.

//Here is a function with two parameters, param1 and param2:

function testFun(param1, param2) {
  console.log(param1, param2);
}
//Then we can call testFun like this: testFun("Hello", "World");.
//We have passed two string arguments, Hello and World.
//Inside the function, param1 will equal the string Hello and param2 will equal the string World. 
//Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.
function functionWithArgs(word1, word2) {
  console.log(word1, word2);
}
functionWithArgs("My", "Sharona")
//output is My Sharona in the console

function functionWithArgs(word1,word2) { //create a new function that accepts two values
  console.log(word1 + word2); //when this function is called, add the two values together and output them in the console
}
functionWithArgs(12,5) //adds 12 + 5. console output is 17


//In JavaScript, scope refers to the visibility of variables. 
//Variables which are defined outside of a function block have Global scope. 
//This means, they can be seen everywhere in your JavaScript code.
//Variables which are declared without the var keyword are automatically created in the global scope.
//This can create unintended consequences elsewhere in your code or when running a function again.
//You should always declare your variables with var.

//Variables which are declared within a function, as well as the function parameters, have local scope. 
//That means they are only visible within that function.
//Here is a function myTest with a local variable called loc.

function myTest() {
  var loc = "foo";
  console.log(loc);
}
myTest();
console.log(loc);
//The myTest() function call will display the string foo in the console.
//The console.log(loc) line will throw an error, as loc is not defined outside of the function.


//It is possible to have both local and global variables with the same name. 
//When you do this, the local variable takes precedence over the global variable.
//In this example:

var someVar = "Hat";
function myFun() {
  var someVar = "Head";
  return someVar;
}
//The function myFun will return the string Head because the local version of the variable is present.


//We can pass values into a function with arguments. 
//You can use a return statement to send a value back out of a function.
//Example

function plusThree(num) {
  return num + 3;
}
var answer = plusThree(5);
//answer has the value 8.

//plusThree takes an argument for num and returns a value equal to num + 3.
function timesFive(num) { //creates a new function called timesFive that accepts a value
  return num * 5; //defines what happens when the function is called
}
var solution = timesFive(4); //creates a new variable called solution that calls the function timesFive
console.log(solution) //outputs 4 * 5 on the console


//A function can include the return statement but it does not have to. 
//In the case that the function doesn't have a return statement, when you call it, the function processes the inner code but the returned value is undefined.
//Example

var sum = 0;
function addSum(num) {
  sum = sum + num;
}
addSum(3);
//addSum is a function without a return statement. 
//The function will change the global sum variable but the returned value of the function is undefined.


//everything to the right of the equal sign is resolved before the value is assigned. 
//This means we can take the return value of a function and assign it to a variable.
//Assume we have pre-defined a function sum which adds two numbers together, then:

ourSum = sum(5, 12);
//will call sum function, which returns a value of 17 and assigns it to ourSum variable.
